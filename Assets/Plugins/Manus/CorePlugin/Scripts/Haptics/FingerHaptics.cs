using UnityEngine;

namespace Manus.Haptics
{
	/// <summary>
	/// This is the class which needs to be on a finger of a hand, it automatically creates Joint Haptics on children with colliders.
	/// Each of the colliders attributes to a percentage of the haptic strength.
	/// If all colliders are colliding with an object the maximum amount of haptic is triggered.
	/// For example if 3 Colliders exist on the finger, and only 2 of these are touching a collider, the haptic value will be 0.666f.
	/// </summary>
	[DisallowMultipleComponent]
	[AddComponentMenu("Manus/Haptics/Finger (Haptics)")]
	public class FingerHaptics : MonoBehaviour
	{
		public Utility.FingerType fingerType = Utility.FingerType.Invalid;

		public bool autoGenerateJointHaptics = true;

		JointHaptics[] m_Joints;

		private void Start()
		{
			if (autoGenerateJointHaptics)
			{
				Collider[] t_Cols = GetComponentsInChildren<Collider>();
				for (int i = 0; i < t_Cols.Length; i++)
				{
					if (t_Cols[i].GetComponent<JointHaptics>() == null)
					{
						t_Cols[i].gameObject.AddComponent<JointHaptics>();
					}
				}
			}
			m_Joints = GetComponentsInChildren<JointHaptics>();
		}

		/// <summary>
		/// Returns the amount of haptics generated by this finger.
		/// All JointHaptics contribute equally to the amount of haptics generated, with the maximum being 1.0f.
		/// </summary>
		/// <returns></returns>
		public float GetHapticValue()
		{
			if (m_Joints.Length == 0) return 0.0f;
			float t_Cnt = 0.0f;
			foreach (JointHaptics t_J in m_Joints)
			{
				t_Cnt += t_J.collisions == 0 ? 0.0f : 1.0f;
			}
			return t_Cnt / m_Joints.Length;
		}

		/// <summary>
		/// Resets all the joint haptics
		/// </summary>
		public void ResetHaptics()
		{
			foreach (JointHaptics t_J in m_Joints)
			{
				t_J.ResetHaptics();
			}
		}
	}
}
